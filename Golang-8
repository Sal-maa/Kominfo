package main

import (
	"fmt"
	"sync"
	"time"
)

// //hands on1
// import (
// 	"fmt"
// 	"time"
// )

// func say(s string) {
// 	for i := 0; i < 5; i++ {
// 		time.Sleep(100 * time.Millisecond)
// 		fmt.Println(s)
// 	}
// }

// func main() {
// 	go say("World")

// 	say("Hello")
// }

// // hands on 2

// import "fmt"

// func myfunc(ch chan int) {
// 	fmt.Println(234 + <-ch)
//}

// func main() {
// 	fmt.Println("start Main method")

// 	ch := make(chan int)
// 	go myfunc(ch)
// 	ch <- 23
// 	fmt.Println("End Main method")

// 	ch2 := make(chan string, 2)

// 	ch2 <- "Hello"
// 	ch2 <- "Goroutine"

// 	msgFirst := <-ch2
// 	msgLast := <-ch2
// 	fmt.Println(msgFirst)
// 	fmt.Println(msgLast)
// }

//hands on 3
func showLastName(name string, wg *sync.WaitGroup) {

	defer wg.Done()

	fmt.Println("Worker is starting..")
	fmt.Println("My name is : ", name)
	time.Sleep(100 * time.Millisecond)

	fmt.Println("Worker is done..")
}

func main() {
	// Spawn goroutine sejumlah 10 item
	// Handle spawning goroutine using WaitGroup
	var wg sync.WaitGroup

	for i := 1; i <= 10; i++ {
		wg.Add(1)
		go showLastName("Salmaa", &wg)
	}

	wg.Wait()
}
